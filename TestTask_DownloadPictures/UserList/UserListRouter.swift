//
//  UserListRouter.swift
//  TestTask_DownloadPictures
//
//  Created by Кирилл Нескоромный on 21.11.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol UserListRoutingLogic {
    func routeToPhotos(segue: UIStoryboardSegue?)
}

protocol UserListDataPassing {
    var dataStore: UserListDataStore? { get }
}

class UserListRouter: NSObject, UserListRoutingLogic, UserListDataPassing {
    
    weak var viewController: UserListViewController?
    var dataStore: UserListDataStore?
    
    // MARK: - Routing
    func routeToPhotos(segue: UIStoryboardSegue?) {
        
        if let segue = segue {
            let destinationVC = segue.destination as! PhotosViewController
            var destinationDS = destinationVC.router!.dataStore!
            passDataToPhotos(source: dataStore!, destination: &destinationDS)
        } else {
            let storyboard = UIStoryboard(name: "Main", bundle: nil)
            let destinationVC = storyboard.instantiateViewController(withIdentifier: "PhotosViewController") as! PhotosViewController
            var destinationDS = destinationVC.router!.dataStore!
            passDataToPhotos(source: dataStore!, destination: &destinationDS)
            navigateToPhotos(source: viewController!, destination: destinationVC)
        }
    }
    
    // MARK: - Navigation
    func navigateToPhotos(source: UserListViewController, destination: PhotosViewController) {
        source.show(destination, sender: nil)
    }
    
    // MARK: - Passing data
    func passDataToPhotos(source: UserListDataStore, destination: inout PhotosDataStore) {
        guard let indexPath = viewController?.tableView.indexPathForSelectedRow else {
            return
        }
        let id = source.users[indexPath.row].id
        
        destination.name = source.users[indexPath.row].name
        destination.photos = getPhotos(from: source, with: id)

    }
    
    // MARK: - Filter Photos
    private func getPhotos(from source: UserListDataStore, with userID: Int) -> [Photo] {
        let albumIDs = source.albums.filter { album in
            album.userID == userID
        }.map { $0.id }
        
        return source.photos.filter { photo in
            albumIDs.contains(photo.albumID)
        }
    }
}
